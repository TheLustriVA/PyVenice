name: Venice.ai API Monitor

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  monitor-api:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install PyYAML httpx deepdiff playwright beautifulsoup4
        playwright install chromium
        
    - name: Run API monitor
      id: monitor
      run: |
        python scripts/api-monitor.py --json --skip-changelog > monitor_output.json
        echo "changes_detected=$(python -c "import json; data=json.load(open('monitor_output.json')); print('true' if any(data.get('endpoints', {}).values()) or any(data.get('schemas', {}).values()) else 'false')")" >> $GITHUB_OUTPUT
      env:
        VENICE_API_KEY: ${{ secrets.VENICE_API_KEY }}
        VENICE_ADMIN_KEY: ${{ secrets.VENICE_ADMIN_KEY }}
        
    - name: Generate detailed diff report
      if: steps.monitor.outputs.changes_detected == 'true'
      run: |
        # Create backup of old spec for comparison
        cp docs/swagger.yaml docs/swagger_previous.yaml
        git checkout HEAD~1 -- docs/swagger.yaml || echo "No previous version"
        mv docs/swagger.yaml docs/swagger_old.yaml || touch docs/swagger_old.yaml
        mv docs/swagger_previous.yaml docs/swagger.yaml
        
        # Generate detailed schema diff
        python scripts/schema-diff.py --old docs/swagger_old.yaml --new docs/swagger.yaml > schema_diff_report.txt || echo "Diff generation failed"
        
    - name: Generate endpoint code recommendations
      if: steps.monitor.outputs.changes_detected == 'true'
      run: |
        python scripts/generate-endpoint.py > code_generation_report.txt
        
    - name: Create issue for API changes
      if: steps.monitor.outputs.changes_detected == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const monitorData = JSON.parse(fs.readFileSync('monitor_output.json', 'utf8'));
          const schemaReport = fs.readFileSync('schema_diff_report.txt', 'utf8').substring(0, 50000); // Limit to 50k chars
          const codeReport = fs.readFileSync('code_generation_report.txt', 'utf8').substring(0, 10000);
          
          const title = `ðŸš¨ Venice.ai API Changes Detected - ${monitorData.version_change.new}`;
          const body = `# Venice.ai API Changes Detected
          
          **Version Change:** ${monitorData.version_change.old} â†’ ${monitorData.version_change.new}
          **Detection Time:** ${monitorData.timestamp}
          **Summary:** ${monitorData.summary}
          
          ## Changes Overview
          
          ### Modified Schemas (${monitorData.schemas.modified.length})
          ${monitorData.schemas.modified.map(s => `- ${s}`).join('\n')}
          
          ### New Endpoints (${monitorData.endpoints.added.length})
          ${monitorData.endpoints.added.map(e => `- ${e}`).join('\n')}
          
          ### Removed Endpoints (${monitorData.endpoints.removed.length})
          ${monitorData.endpoints.removed.map(e => `- ${e}`).join('\n')}
          
          ## Detailed Schema Differences
          
          \`\`\`
          ${schemaReport}
          \`\`\`
          
          ## Code Generation Report
          
          \`\`\`
          ${codeReport}
          \`\`\`
          
          ## Next Steps
          
          1. Review the schema changes above
          2. Update client code using the generated prompt: \`cat /tmp/claude_prompt.md\`
          3. Test the updated client against the new API version
          4. Update documentation and examples
          5. Run the full test suite
          6. Close this issue once changes are implemented
          
          ---
          *This issue was automatically generated by the Venice.ai API monitoring workflow.*`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['api-change', 'automation', 'needs-review']
          });
          
    - name: Commit updated swagger spec
      if: steps.monitor.outputs.changes_detected == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/swagger.yaml docs/api_changes.json docs/api_update_report.md
        git commit -m "ðŸ¤– Update Venice.ai API spec to ${GITHUB_REF##*/}

        - Version: $(python -c "import json; print(json.load(open('monitor_output.json'))['version_change']['new'])")
        - Modified schemas: $(python -c "import json; print(len(json.load(open('monitor_output.json'))['schemas']['modified']))")
        - New endpoints: $(python -c "import json; print(len(json.load(open('monitor_output.json'))['endpoints']['added']))")
        
        ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
        
        Co-Authored-By: Claude <noreply@anthropic.com>" || echo "No changes to commit"
        
    - name: Push changes
      if: steps.monitor.outputs.changes_detected == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main